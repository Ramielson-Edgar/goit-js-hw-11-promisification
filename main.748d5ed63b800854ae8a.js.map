{"version":3,"sources":["webpack:///./js/links.js","webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["users","name","active","delay","ms","tieme","Promise","resolve","logger","time","console","log","then","toggleUserState","allUsers","userName","updatedUsers","map","user","message","makeTransaction","transaction","min","max","Math","floor","random","reject","setTimeout","logSuccess","id","logError","warn","amount","catch"],"mappings":"kGAAA,IAAMA,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,ICJnBC,G,oBAAQ,SAAAC,GACZ,IAAMC,EAAQD,EACd,OAAOE,QAAQC,QAAQF,KAGnBG,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCPXK,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKjB,OAASc,EAAd,iBAA8BG,EAA9B,CAAoChB,QAASgB,EAAKhB,SAAWgB,KAG/D,OAAOZ,QAAQC,QAAQS,IAGnBR,EAAS,SAAAW,GAAO,OAAIT,QAAQC,IAAIQ,IAEtCN,EAAgBb,EAAO,SAASY,KAAKJ,GACrCK,EAAgBb,EAAO,OAAOY,KAAKJ,GCbnC,IAIMY,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCpB,GAL2BmB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAIhB,SAAQ,SAACC,EAASoB,GAC3BC,YAAW,WACUJ,KAAKE,SAAW,GAGjCnB,EAAQsB,EAAWR,EAAYS,GAAI3B,IAEnCwB,EAAOI,EAASV,EAAYS,OAE7B3B,OAGD0B,EAAa,SAACC,EAAIrB,GACtBC,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8CrB,EAA9C,OAGIsB,EAAW,SAAAD,GACfpB,QAAQsB,KAAR,gCAA6CF,EAA7C,8BAGFV,EAAgB,CAAEU,GAAI,GAAIG,OAAQ,MAAOrB,KAAKiB,GAAYK,MAAMH,GAEhEX,EAAgB,CAAEU,GAAI,GAAIG,OAAQ,MAAOrB,KAAKiB,GAAYK,MAAMH,GAEhEX,EAAgB,CAAEU,GAAI,GAAIG,OAAQ,KAAMrB,KAAKiB,GAAYK,MAAMH,GAE/DX,EAAgB,CAAEU,GAAI,GAAIG,OAAQ,MAAOrB,KAAKiB,GAAYK,MAAMH,K","file":"main.748d5ed63b800854ae8a.js","sourcesContent":["const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nexport { users };\r\n","const delay = ms => {\r\n  const tieme = ms;\r\n  return Promise.resolve(tieme);\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(logger);\r\ndelay(1000).then(logger);\r\ndelay(1500).then(logger);\r\n","import { users } from './links';\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  return Promise.resolve(updatedUsers);\r\n};\r\n\r\nconst logger = message => console.log(message);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve(logSuccess(transaction.id, delay));\r\n      } else {\r\n        reject(logError(transaction.id));\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\nconst logSuccess = (id, time) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}